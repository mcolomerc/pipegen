name: Release

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  pull-requests: read

env:
  GO_VERSION: '1.20'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
      
    - name: Run lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest

  build:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    needs: [test]
    
    strategy:
      matrix:
        include:
          # Linux builds
          - os: linux
            arch: amd64
            ext: ""
          - os: linux
            arch: arm64
            ext: ""
          - os: linux
            arch: 386
            ext: ""
          # macOS builds
          - os: darwin
            arch: amd64
            ext: ""
          - os: darwin
            arch: arm64
            ext: ""
          # Windows builds
          - os: windows
            arch: amd64
            ext: ".exe"
          - os: windows
            arch: 386
            ext: ".exe"
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Get version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Build binary
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 0
      run: |
        # Set build info
        VERSION=${{ steps.version.outputs.version }}
        COMMIT=$(git rev-parse --short HEAD)
        DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        # Build with version info
        go build \
          -ldflags "-s -w -X main.version=${VERSION} -X main.commit=${COMMIT} -X main.date=${DATE}" \
          -o pipegen-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }} \
          .
        
    - name: Create archive
      run: |
        if [[ "${{ matrix.os }}" == "windows" ]]; then
          zip -r pipegen-${{ matrix.os }}-${{ matrix.arch }}.zip pipegen-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }} README.md LICENSE
        else
          tar -czf pipegen-${{ matrix.os }}-${{ matrix.arch }}.tar.gz pipegen-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }} README.md LICENSE
        fi
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pipegen-${{ matrix.os }}-${{ matrix.arch }}
        path: |
          pipegen-${{ matrix.os }}-${{ matrix.arch }}.*

  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test]
    if: false  # Skip Docker build
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Get version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          pipegen/pipegen
          ghcr.io/${{ github.repository }}
        tags: |
          type=semver,pattern={{version}},value=${{ steps.version.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.version }}
          type=semver,pattern={{major}},value=${{ steps.version.outputs.version }}
          type=raw,value=latest
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ steps.version.outputs.version }}
          COMMIT=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build]  # Removed docker dependency
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Get version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Generate changelog
      id: changelog
      run: |
        if git describe --tags --abbrev=0 HEAD~1 >/dev/null 2>&1; then
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1)
          echo "## What's Changed" > CHANGELOG.md
          git log --pretty=format:"- %s (%h)" ${PREVIOUS_TAG}..HEAD >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${{ steps.version.outputs.version }}" >> CHANGELOG.md
        else
          echo "## üéâ Initial Release" > CHANGELOG.md
          echo "This is the first release of PipeGen!" >> CHANGELOG.md
        fi
        
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "*.tar.gz" -o -name "*.zip" | while read file; do
          cp "$file" release-assets/
        done
        
    - name: Create checksums
      run: |
        cd release-assets
        sha256sum * > checksums.txt
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: "Release ${{ steps.version.outputs.version }}"
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}
        files: |
          release-assets/*
        fail_on_unmatched_files: true
        generate_release_notes: true
        
    - name: Update release notes
      run: |
        echo "‚úÖ Release ${{ steps.version.outputs.version }} created successfully!"
        echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}"
        echo "üê≥ Docker images:"
        echo "  - pipegen/pipegen:${{ steps.version.outputs.version }}"
        echo "  - ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}"

  homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: [create-release]
    if: "!contains(github.ref, '-')" # Only for stable releases
    
    steps:
    - name: Update Homebrew formula
      uses: mislav/bump-homebrew-formula-action@v3
      with:
        formula-name: pipegen
        homebrew-tap: ${{ github.repository_owner }}/homebrew-tap
        base-branch: main
        download-url: "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/pipegen-darwin-amd64.tar.gz"
        commit-message: |
          {{formulaName}} {{version}}
          
          Created by https://github.com/mislav/bump-homebrew-formula-action
      env:
        COMMITTER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
